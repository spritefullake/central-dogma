// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Belt_Option = require("bs-platform/lib/js/belt_Option.js");

function replicate_DNA(base) {
  switch (base) {
    case /* A */0 :
        return /* T */1;
    case /* T */1 :
        return /* A */0;
    case /* C */2 :
        return /* G */3;
    case /* G */3 :
        return /* C */2;
    
  }
}

function replicate_RNA(base) {
  switch (base) {
    case /* A */0 :
        return /* U */1;
    case /* U */1 :
        return /* A */0;
    case /* C */2 :
        return /* G */3;
    case /* G */3 :
        return /* C */2;
    
  }
}

function transcribe(base) {
  switch (base) {
    case /* A */0 :
        return /* U */1;
    case /* T */1 :
        return /* A */0;
    case /* C */2 :
        return /* G */3;
    case /* G */3 :
        return /* C */2;
    
  }
}

function reverse_transcribe(base) {
  switch (base) {
    case /* A */0 :
        return /* T */1;
    case /* U */1 :
        return /* A */0;
    case /* C */2 :
        return /* G */3;
    case /* G */3 :
        return /* C */2;
    
  }
}

function to_dna(letter) {
  switch (letter) {
    case "A" :
        return /* A */0;
    case "C" :
        return /* C */2;
    case "G" :
        return /* G */3;
    case "T" :
        return /* T */1;
    default:
      return ;
  }
}

function to_rna(letter) {
  switch (letter) {
    case "A" :
        return /* A */0;
    case "C" :
        return /* C */2;
    case "G" :
        return /* G */3;
    case "U" :
        return /* U */1;
    default:
      return ;
  }
}

function dna_to_string(base) {
  switch (base) {
    case /* A */0 :
        return "A";
    case /* T */1 :
        return "T";
    case /* C */2 :
        return "C";
    case /* G */3 :
        return "G";
    
  }
}

function rna_to_string(base) {
  switch (base) {
    case /* A */0 :
        return "A";
    case /* U */1 :
        return "U";
    case /* C */2 :
        return "C";
    case /* G */3 :
        return "G";
    
  }
}

function parse_dna(f, letter) {
  return Belt_Option.map(to_dna(letter), f);
}

function parse_rna(f, letter) {
  return Belt_Option.map(to_rna(letter), f);
}

function display_transcription(letter) {
  var match = Belt_Option.map(to_dna(letter), transcribe);
  if (match !== undefined) {
    return rna_to_string(match);
  } else {
    return "";
  }
}

function display_replication(letter) {
  var match = Belt_Option.map(to_dna(letter), replicate_DNA);
  if (match !== undefined) {
    return dna_to_string(match);
  } else {
    return "";
  }
}

exports.replicate_DNA = replicate_DNA;
exports.replicate_RNA = replicate_RNA;
exports.transcribe = transcribe;
exports.reverse_transcribe = reverse_transcribe;
exports.to_dna = to_dna;
exports.to_rna = to_rna;
exports.dna_to_string = dna_to_string;
exports.rna_to_string = rna_to_string;
exports.parse_dna = parse_dna;
exports.parse_rna = parse_rna;
exports.display_transcription = display_transcription;
exports.display_replication = display_replication;
/* No side effect */
